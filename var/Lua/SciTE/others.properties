# Define SciTE settings for other simple files.

file.patterns.props=*.properties;*.session;*.ini;*.inf;*.reg;*.url;*.cfg;*.cnf;*.aut
file.patterns.text=*.txt;*.log;*.lst;*.doc;*.diz;*.nfo
file.patterns.batch=*.bat;*.cmd;*.nt
file.patterns.diff=*.diff;*.patch
file.patterns.make=makefile;Makefile;*.mak;configure

filter.properties=Properties (ini inf reg url cfg cnf)|$(file.patterns.props)|
filter.text=Text (txt log lst doc diz nfo)|$(file.patterns.text);make*|
filter.batch=Batch (bat cmd nt)|$(file.patterns.batch)|
filter.diff=Difference (diff patch)|$(file.patterns.diff)|

lexer.$(file.patterns.props)=props
lexer.$(file.patterns.batch)=batch
lexer.*.err=errorlist
lexer.$(file.patterns.make)=makefile
lexer.*.iface=makefile
lexer.$(file.patterns.diff)=diff

word.characters.$(file.patterns.text)=$(chars.alpha)$(chars.numeric)$(chars.accented)-'

colour.other.operator=$(stdstyle.operator1)

# Properties styles

style.props.32=$(stdstyle.default)
# Default
style.props.0=$(stdstyle.default)
# Comment
style.props.1=$(stdstyle.eolcomment1)
# Section
style.props.2=$(stdstyle.visualbreak1)
# Assignment operator
style.props.3=$(stdstyle.operator1)
# Default value (@)
style.props.4=$(stdstyle.preprocessor1)
# Key
style.props.5=$(stdstyle.identifier2)
# Matched Operators
style.props.34=$(stdstyle.bracematch1)
style.props.35=$(stdstyle.bracemismatch1)
comment.block.props=#~
preprocessor.symbol.$(file.patterns.make)=!
preprocessor.start.$(file.patterns.make)=IF IFDEF IFNDEF
preprocessor.middle.$(file.patterns.make)=ELSE ELSEIF ELSEIFDEF ELSEIFNDEF
preprocessor.end.$(file.patterns.make)=ENDIF

# Batch styles

# List from http://www.easydos.com/dosindex.html
# I limit here the commands to those built in command.com, ie. I don't list external Dos commands
# if [no] (test) (command) -- test is EXIST (filename) | (string1)==(string2) | ERRORLEVEL (number)
# for %%(variable) IN (set) DO (command) -- variable is [a-zA-Z] -- eg for %%X in (*.txt) do type %%X
keywordclass.batch=rem set if exist errorlevel for in do \
break call chcp cd chdir choice cls country ctty date del erase dir echo \
exit goto loadfix loadhigh mkdir md move path pause prompt rename ren \
rmdir rd shift time type ver verify vol \
com con lpt nul \
color copy defined else not start
keywords.$(file.patterns.batch)=$(keywordclass.batch)

# Optional list of external commands to highlight in style 5.
# If not set all commands are highlighted in style 5.
#keywords2.$(file.patterns.batch)=append attrib chkdsk comp diskcomp

style.batch.32=$(stdstyle.default)
# Default
style.batch.0=$(stdstyle.default)
# Comment (rem or ::)
style.batch.1=$(stdstyle.eolcomment1)
# Keywords
style.batch.2=$(stdstyle.keyword1)
# Label (line beginning with ':')
style.batch.3=$(stdstyle.visualbreak1)
# Hide command character ('@')
style.batch.4=$(stdstyle.preprocessor1)
# External commands
style.batch.5=$(stdstyle.keyword2)
# Variable: %%x (x is almost whatever, except space and %), %n (n in [0-9]), %EnvironmentVar%
style.batch.6=$(stdstyle.identifier2)
# Operator: * ? < > |
style.batch.7=$(stdstyle.importantoperator1)

comment.block.batch=REM ~

# Makefile styles

style.makefile.32=$(stdstyle.default)
# Default
style.makefile.0=$(stdstyle.default)
# Comment: #
style.makefile.1=$(stdstyle.eolcomment1)
# Pre-processor or other comment: !
style.makefile.2=$(stdstyle.preprocessor1)
# Variable: $(x)
style.makefile.3=$(stdstyle.identifier2)
# Operator
style.makefile.4=$(stdstyle.operator1)
# Target
style.makefile.5=f$(stdstyle.keyword1)
# Error
style.makefile.9=$(stdstyle.stringerror)
# Matched Operators
style.makefile.34=$(stdstyle.bracematch1)
style.makefile.35=$(stdstyle.bracemismatch1)
comment.block.makefile=#~

# Error list styles
style.errorlist.32=$(stdstyle.default)
# Default
style.errorlist.0=$(stdstyle.default)
# python Error
style.errorlist.1=$(stdstyle.error)
# gcc Error
style.errorlist.2=$(stdstyle.error)
# Microsoft Error
style.errorlist.3=$(stdstyle.error)
# command or return status
style.errorlist.4=$(stdstyle.command)
# Borland error and warning messages
style.errorlist.5=$(stdstyle.error)
# perl error and warning messages
style.errorlist.6=f$(stdstyle.error)
# .NET tracebacks
style.errorlist.7=$(stdstyle.error)
# Lua error and warning messages
style.errorlist.8=$(stdstyle.error)
# ctags
style.errorlist.9=$(stdstyle.error)
# diff changed !
style.errorlist.10=$(stdstyle.diff2)
# diff addition +
style.errorlist.11=$(stdstyle.diff6)
# diff deletion -
style.errorlist.12=$(stdstyle.diff5)
# diff message ---
style.errorlist.13=$(stdstyle.diff2)
# PHP error
style.errorlist.14=$(stdstyle.error)
# Essential Lahey Fortran 90 error
style.errorlist.15=$(stdstyle.error)
# Intel Fortran Compiler error
style.errorlist.16=$(stdstyle.error)
# Intel Fortran Compiler v8.0 error/warning
style.errorlist.17=$(stdstyle.error)
# Absoft Pro Fortran 90/95 v8.2 error or warning
style.errorlist.18=$(stdstyle.error)
# HTML Tidy
style.errorlist.19=$(stdstyle.error)
# Java runtime stack trace
style.errorlist.20=$(stdstyle.error)
# Text matched with find in files and message part of GCC errors
style.errorlist.21=$(stdstyle.default)
# Ensures that spacing is not affected by line number styles
#style.errorlist.33=$(font.small)

lexer.errorlist.value.separate=1

# Difference styles

# Default
style.diff.0=$(stdstyle.default)
# Comment (part before "diff ..." or "--- ..." and , Only in ..., Binary file...)
style.diff.1=$(stdstyle.diff1)
# Command (diff ...)
style.diff.2=$(stdstyle.diff2)
# Source file (--- ...) and Destination file (+++ ...)
style.diff.3=$(stdstyle.diff3)
# Position setting (@@ ...)
style.diff.4=$(stdstyle.diff4)
# Line removal (-...)
style.diff.5=$(stdstyle.diff5)
# Line addition (+...)
style.diff.6=$(stdstyle.diff6)

command.build.makefile=make
command.build.*.mak=make

if PLAT_WIN
	command.go.*.bat=$(FileNameExt)
	command.name.0.*.bat=Execute Selection
	command.0.*.bat=$(CurrentSelection)
	command.name.1.*.mak=nmake
	command.1.*.mak=nmake -f $(FileNameExt)
